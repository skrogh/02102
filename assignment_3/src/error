import java.util.*;

public class Checkpoint extends GameObject {
	
	protected int xEnd, yEnd;
	
	
	public Checkpoint( int x0, int y0, int x1, int y1 ) {
		ID = IDs.CHECKPOINT;
		collidable = true;
		xPos = x0;
		yPos = y0;
		xEnd = x1;
		yEnd = y1;
		collisionBox = new ArrayList<int[]>();
		collisionBox.add( new int[]{xPos, yPos, xEnd, yEnd} );
	}
	
	public void render() {
		StdDraw.setPenColor( StdDraw.BLUE );
		StdDraw.setPenRadius( 0.003 );
		StdDraw.line( xPos, yPos, xEnd, yEnd );
	}

}
import java.util.*;

public class GameObject {
	
	public static enum IDs{ BACKGROUND, MAP, RACE_CAR, AI, PLAYER, WALL, MISC, CHECKPOINT };
	public static enum states{ ALIVE, DEAD, INVISIBLE };
	
	protected int xPos;
	protected int yPos;
	
	protected int xTile;
	protected int yTile;
	
	protected IDs ID;
	protected states state;
	
	protected boolean collidable;
	protected ArrayList<int[]> collisionBox;
	
	public GameObject() {
		
	}
	
	public void update() {
		
	}
	
	public void render() {
		
	}

	public int getxPos() {
		return xPos;
	}

	public void setxPos( int xPos ) {
		this.xPos = xPos;
	}

	public int getyPos() {
		return yPos;
	}

	public void setyPos( int yPos ) {
		this.yPos = yPos;
	}

	public IDs getId() {
		return ID;
	}


	public states getState() {
		return state;
	}

	public void setState( states state ) {
		this.state = state;
	}

	public boolean isCollidable() {
		return collidable;
	}
	
	public ArrayList<int[]> getCollisionBox() {
		return collisionBox;
	}
	
	public void collided( GameObject object ) {
		
	}
	
	public void keyPressed( int key ) {
		
	}
	
	
}
import java.util.*;


public class GhostPlayer extends Player {
	
	private List<Integer> moves; // stores list of moves
	
	public GhostPlayer( int x, int y, ArrayList<Checkpoint> checkpoints, List<Integer> moves ){
		super( x, y, checkpoints );
		this.moves = moves;
	
	}
	
	public GhostPlayer( int x, int y, ArrayList<Checkpoint> checkpoints){
		super( x, y, checkpoints );
		this.moves = new ArrayList<Integer>(); 
		
		for( long i = 0; i < 200; i++ ) {
			moves.add( (int) ( Math.floor(Math.random()*9) + 1 ) );
		}
		
	}
	
	public void render() {
		if ( state == states.ALIVE ) {
			int[] pointP = path.get(0);
			for ( int[] point : path ) {
				if ( point[2] == 1 )
					StdDraw.setPenColor( StdDraw.RED );
				else
					StdDraw.setPenColor( StdDraw.BOOK_BLUE );
				StdDraw.setPenRadius( 0.0007 );
				StdDraw.line( pointP[0], pointP[1], point[0], point[1] );
				pointP = point;
			}
			StdDraw.setPenColor( StdDraw.GREEN );
			StdDraw.setPenRadius( 0.001 );
			StdDraw.point( xPos, yPos );
		}
	}
	
	public void keyPressed( int key ) {
		if ( ( state == states.ALIVE ) && ( key > 0x30 ) && ( key < 0x3A ) )
			movePlayer( moves.remove( 0 ) );
		else if ( !( ( key > 0x30 ) && ( key < 0x3A ) ) )
			System.out.println( this + " has this left: " + this.checkpoints );
	}
	
	public void onDeath( int steps ) {
		state = states.DEAD;
	}
	public void onWin( int steps ) {
		System.out.println( "Ghost vundet" );
	}
	
}
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.*;

/*=========================================================
 * MapCreator
 * 	Opens a map creation window. Lines that represent walls 
 * 	can be drawn and saved to a file
 * ========================================================
 */

public class MapCreator {
	
	private static FileWriter fstream;
	private static BufferedWriter out;
	
	private static ArrayList<Wall> addedWalls;
	private static ArrayList<Checkpoint> addedCheckpoints;
	
	public static void main( String args[] ) {
		
		
		addedWalls = new ArrayList<Wall>();
		addedCheckpoints = new ArrayList<Checkpoint>();
		
		
		boolean exit_and_save = false;
		
		StdDraw.setCanvasSize( 640, 480 );
		StdDraw.setXscale( 0, 640 );
		StdDraw.setYscale( 480, 0 );
		
		
		while ( !exit_and_save ) {
			if( StdDraw.mousePressed() ) {
				System.out.println(StdDraw.mouseX() + " , " + StdDraw.mouseY() );
				try {
					Thread.currentThread().sleep(100);
				} catch (InterruptedException e) {
            		Thread.currentThread().interrupt();
				}
			}
			
			if( StdDraw.hasNextKeyTyped() ) {
				switch ( StdDraw.nextKeyTyped() ) {
				case KeyEvent.VK_ESCAPE:
					exit_and_save = true;
					saveToFile();
					break;
				case KeyEvent.VK_W:
					recordWall();
					break;
				case KeyEvent.VK_C:
					recordCheckpoint();
					break;
				}
			}
            render();
		}
		
		System.out.println("durr");
		try {
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	/*=====================================================
	 * getFileName()
	 * 	Attempts to retrieve a filename for a mapfile
	 * 	in the order map0.map->mapN.map
	 * ====================================================
	 */
	public static String getFileName() {
		String fileName = "maps" + File.separator + "map";
		
		boolean valid_name_found = false;
		int mapCount = 0;
		
		while ( !valid_name_found ) {
			String attemptFileName = fileName + Integer.toString( mapCount ) + ".map";
			File attemptFile = new File( attemptFileName );
			
			if ( !attemptFile.exists( ) ) {
				fileName = attemptFileName;
				valid_name_found = true;
				try {
					attemptFile.createNewFile();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			}
			mapCount++;
		}
		
		return fileName;
	}
	
	public static void recordWall() {
		int xStart = (int) StdDraw.mouseX();
		int yStart = (int) StdDraw.mouseY();
		
		int xEnd = 0;
		int yEnd = 0;
		
		while( !StdDraw.hasNextKeyTyped() ) {
			if (StdDraw.mousePressed() ) {
				xEnd = (int) StdDraw.mouseX();
				yEnd = (int) StdDraw.mouseY();
				break;
			}
		}
		
		Wall wall = new Wall( xStart, yStart, xEnd, yEnd );
		addedWalls.add( wall );
		render();
	}
	
	public static void recordCheckpoint() {
		int xStart = (int) StdDraw.mouseX();
		int yStart = (int) StdDraw.mouseY();
		
		int xEnd = 0;
		int yEnd = 0;
		
		while( !StdDraw.hasNextKeyTyped() ) {
			if (StdDraw.mousePressed() ) {
				xEnd = (int) StdDraw.mouseX();
				yEnd = (int) StdDraw.mouseY();
				break;
			}
		}
		
		Checkpoint checkpoint = new Checkpoint( xStart, yStart, xEnd, yEnd );
		addedCheckpoints.add( checkpoint );
		render();
	}
	
	public static void saveToFile() {
        
		String fileName = getFileName();
		try {
			fstream = new FileWriter( fileName );
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		out = new BufferedWriter( fstream );
        String saveString = "";
		//save first checkpoint for starting line
		int xStart, yStart, xEnd, yEnd;
		xStart = addedCheckpoints.get( 0 ).xPos;
		yStart = addedCheckpoints.get( 0 ).yPos;
		xEnd = addedCheckpoints.get( 0 ).xEnd;
		yEnd = addedCheckpoints.get( 0 ).yEnd;
		
		saveString = Integer.toString( xStart ) + " " + Integer.toString( yStart ) + " " + Integer.toString( xEnd )
				+ " " + Integer.toString( yEnd ) + " " + "checkpoint" + "\n";
		try {
			out.write( saveString );
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//save all walls and checkpoints (except first checkpoint)
		for (int i = 0; i < addedWalls.size(); i++ ) {
			xStart = addedWalls.get( i ).xPos;
			yStart = addedWalls.get( i ).yPos;
			xEnd = addedWalls.get( i ).xEnd;
			yEnd = addedWalls.get( i ).yEnd;
			
			saveString = Integer.toString( xStart ) + " " + Integer.toString( yStart ) + " " + Integer.toString( xEnd )
					+ " " + Integer.toString( yEnd ) + " " + "wall" + "\n";
			try {
				out.write( saveString );
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		for ( int i = 0; i < addedCheckpoints.size(); i++ ) {
			xStart = addedCheckpoints.get( i ).xPos;
			yStart = addedCheckpoints.get( i ).yPos;
			xEnd = addedCheckpoints.get( i ).xEnd;
			yEnd = addedCheckpoints.get( i ).yEnd;
			
			saveString = Integer.toString( xStart ) + " " + Integer.toString( yStart ) + " " + Integer.toString( xEnd )
					+ " " + Integer.toString( yEnd ) + " " + "checkpoint" + "\n";
			try {
				out.write( saveString );
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		//save first checkpoint as finish line
		xStart = addedCheckpoints.get( 0 ).xPos;
		yStart = addedCheckpoints.get( 0 ).yPos;
		xEnd = addedCheckpoints.get( 0 ).xEnd;
		yEnd = addedCheckpoints.get( 0 ).yEnd;
		
		saveString = Integer.toString( xStart ) + " " + Integer.toString( yStart ) + " " + Integer.toString( xEnd )
				+ " " + Integer.toString( yEnd ) + " " + "checkpoint" + "\n";
		try {
			out.write( saveString );
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void render() {
		
		for ( int i = 0; i < addedWalls.size(); i++ ) 
			addedWalls.get( i ).render();
		
		for ( int i = 0; i < addedCheckpoints.size(); i++ ) {
			addedCheckpoints.get( i ).render();
		}
		
	}
}
import java.util.ArrayList;


public class Map {
	
	private int mapHeight;
	private int mapWidth;
	
	private int xStart;
	private int yStart;
	
	private ArrayList<int[]> walls;
	private ArrayList<int[]> checkpoints; // first is startline, last is Finishline.
	
	public Map() {
		this.xStart = 7;
		this.yStart = 24;
		this.mapHeight = 0;
		this.mapWidth = 0;
		this.walls = new ArrayList<int[]>();
		this.checkpoints = new ArrayList<int[]>();
		loadMap(); // load dummy map
	}
	
	public void loadMap() { // dummy
		this.mapWidth = 64;
		this.mapHeight = 48;
		this.walls = new ArrayList<int[]>();
		walls.add( new int[]{0, 0, 64, 0} );
		walls.add( new int[]{64, 0, 64, 48} );
		walls.add( new int[]{64, 48, 0, 48} );
		walls.add( new int[]{0, 48, 0, 0} );
		walls.add( new int[]{14, 24, 50, 24} );
		
		this.checkpoints = new ArrayList<int[]>();
		checkpoints.add( new int[]{0, 24, 14, 24} );
		checkpoints.add( new int[]{32, 0, 32, 24} );
		checkpoints.add( new int[]{50, 24, 64, 24} );
		checkpoints.add( new int[]{32, 24, 32, 48} );
		checkpoints.add( new int[]{0, 24, 14, 24} );
	}
	
	public int[] getSize() {
		return new int[] {mapWidth, mapHeight};
	}
	
	public int[] getStart() {
		return new int[] {xStart, yStart};
	}
	
	public ArrayList<int[]> getWalls() {
		return walls;
	}
	
	public ArrayList<int[]> getCheckpoints() {
		return checkpoints;
	}
	
}
import java.util.*;

public class Player extends GameObject {
	
	ArrayList<int[]> path; // x, y, alive/dead
	ArrayList<Checkpoint> checkpoints; // stores all checkpoints. They are removed when passed. When empty, you win!

	int xSpeed, ySpeed, steps;
	
	public Player( int x, int y, ArrayList<Checkpoint> checkpoints ){
		ID = IDs.PLAYER;
		state = states.ALIVE;
		collidable = true;
		xPos = x;
		yPos = y;
		xSpeed = 0;
		ySpeed = 0;
		steps = 0;
		path = new ArrayList<int[]>();
		path.add( new int[]{xPos, yPos, 0} );
		path.add( new int[]{xPos, yPos, 0} );
		this.checkpoints = (ArrayList<Checkpoint>) checkpoints.clone();
		collisionBox = new ArrayList<int[]>();
		
		System.out.println( this.checkpoints );
	}
	
	public void render() {
		int[] pointP = path.get(0);
		for ( int[] point : path ) {
			if ( point[2] == 1 )
				StdDraw.setPenColor( StdDraw.RED );
			else
				StdDraw.setPenColor( StdDraw.BOOK_BLUE );
			StdDraw.setPenRadius( 0.007 );
			StdDraw.line( pointP[0], pointP[1], point[0], point[1] );
			pointP = point;
		}
		StdDraw.setPenColor( StdDraw.GREEN );
		StdDraw.setPenRadius( 0.01 );
		StdDraw.point( xPos, yPos );
	}
	
	public void update() {
		collisionBox = new ArrayList<int[]>();
		collisionBox.add( new int[]{xPos, yPos,
				path.get( path.size() - 2 )[0], path.get( path.size() - 2 )[1]} );
	}
	
	public void movePlayer( int direction ) {
		switch ( direction ) {
		case 1: //DOWN LEFT
			xSpeed--;
			ySpeed++;
			break;
		case 2: //DOWN
			ySpeed++;
			break;
		case 3: //DOWN RIGHT
			xSpeed++;
			ySpeed++;
			break;
		case 4: //LEFT
			xSpeed--;
			break;
		case 5: //NOP
			break;
		case 6: //RIGHT
			xSpeed++;
			break;
		case 7: //UP LEFT
			xSpeed--;
			ySpeed--;
			break;
		case 8: //UP
			ySpeed--;
			break;
		case 9: //UP RIGHT
			xSpeed++;
			ySpeed--;
			break;
		}
		steps++;
		xPos += xSpeed;
		yPos += ySpeed;
		path.add( new int[]{xPos, yPos, 0} );
	}
	
	public void collided( GameObject object ) {
		if ( object.getId() == IDs.WALL ) {
			onDeath( steps );
			xSpeed = 0;
			ySpeed = 0;
			xPos = path.get( path.size() - 2 )[0];
			yPos = path.get( path.size() - 2 )[1];
			path.add( new int[]{xPos, yPos, 1} );
			path.add( new int[]{xPos, yPos, 0} );
		} else if ( object.getId() == IDs.CHECKPOINT ) {
			// If more checkpoints and the hit is next in line, remove it from checkpoints, that has to be hit.
			if ( !checkpoints.isEmpty() && ( object == checkpoints.get( 0 ) ) )
				checkpoints.remove( 0 );
			// Check if we hit the last checkpoint
			if ( checkpoints.isEmpty() )
				onWin( steps );
			
			
			
		}
	}
	
	public void keyPressed( int key ) {
		if ( ( key > 0x30 ) && ( key < 0x3A ) )
			movePlayer( key - 0x30 );
	}
	
	public void onWin( int steps ) {
		RaceTrack.onWin( steps );
	}
	
	public void onDeath( int steps ) {
		RaceTrack.onDeath( steps );
	}
	
}

import java.util.*;

public class PrimeFactors {

	private static final Scanner inputScanner = new Scanner( System.in );
	private static boolean end_program;
	
	public static void main(String[] args) {
		
		while ( !end_program ) {
			
			long factorNum = getInput();
			if ( end_program )
				break;
			System.out.println( primeFactors( factorNum ).toString() );

			
		}
	}
	
	
	public static ArrayList<Long> primeFactors( long n ) {
		ArrayList<Long> factorList = new ArrayList<Long>();
		
		for (long i = 2; i < ( (long) Math.sqrt( n ) + 1 ); i++ ) {
			if ( n % i == 0 ) {
				n /= i;
				factorList.add( i );
				i--;
			}
		}
		
		if ( n != 0 )
			factorList.add( n );
		
		return factorList;
	}
	
	public static long getInput() {
		System.out.println( "Enter a positive integer greater than 1 to factorize" +
				", exit to termite: " );
		long factorNumber = 2;
		try {
			factorNumber = inputScanner.nextLong();
		}
		catch ( InputMismatchException e ) {
			if ( inputScanner.next().equals( "exit" ) ) {
				end_program = true;
			}
			else {
				factorNumber = getInput();
			}
				
		}
		
		if ( factorNumber <= 1 )
			return getInput();
		return factorNumber;
	}
	
}
import java.util.*;

public class RaceTrack {

	public static ArrayList<GameObject> gameObjects;
	private static boolean game_over;	
	
	public static void main( String args[] ) {

		Scanner console = new Scanner( System.in );
		
		while ( true ) {
			gameObjects = new ArrayList<GameObject>();
			game_over = false;
			setupMap( new Map() );
			Map map = new Map();
			System.out.println( "Game has started!" );
			// Game loop
			StdDraw.show(0);
			while ( !game_over ) {
				update();
				render();
			}
			System.out.println( "Game has ended. Type \"more!\" to play again.\n" +
					"type anything else to be a wuz and quit." );
			if ( !console.nextLine().matches( "more!" ) )
				break;
			
		}
		
		console.close();
	}
	
	public static void render() {
		StdDraw.clear( StdDraw.WHITE );
		for ( GameObject gameObject : gameObjects ) {
			gameObject.render();
		}
		StdDraw.show(0);
	}
	
	public static void update() {
		// key events:
		// only send first key
		if ( StdDraw.hasNextKeyTyped() ) {
			int key = StdDraw.nextKeyTyped();
			for ( GameObject gameObject : gameObjects ) {
				gameObject.keyPressed( key );
			}
		}
		// clear buffer
		while ( StdDraw.hasNextKeyTyped() ) {
			StdDraw.nextKeyTyped();
		}
		
		// position and collision update:
		for ( GameObject gameObject : gameObjects ) {
			gameObject.update();
		}
		
		// collision checking:
		collisionCheck();
	}
	
	public static void setupMap( Map map ) {
		// setup canvas size:
		StdDraw.setCanvasSize( 640, 480 );
		StdDraw.setXscale( 0, map.getSize()[0] );
		StdDraw.setYscale( map.getSize()[1], 0 );
		
		// add walls
		for ( int[] wall : map.getWalls() ) {
			gameObjects.add( new Wall( wall[0], wall[1], wall[2], wall[3] ) );
		}
		
		// add checkpoints
		ArrayList<Checkpoint> checkpoints = new ArrayList<Checkpoint>();
		for ( int[] checkpoint : map.getCheckpoints() ) {
			checkpoints.add( new Checkpoint( checkpoint[0], checkpoint[1], checkpoint[2], checkpoint[3] ) );
			gameObjects.add( checkpoints.get( checkpoints.size() - 1 ) );
		}
		
		gameObjects.add( new Player( map.getStart()[0], map.getStart()[1], checkpoints ) );
		
		for ( int i = 0; i < 10000; i++ ) {
			gameObjects.add( new GhostPlayer( map.getStart()[0], map.getStart()[1], checkpoints ) );
		}
		
	}
	
	public static void collisionCheck() {
		for ( int i = 0; i < gameObjects.size(); i++ ) {
			for ( int j = i + 1; j < gameObjects.size(); j++ ) {
				if ( ( gameObjects.get(i).getId() != gameObjects.get(j).getId() ) &&
						( gameObjects.get(i).getState() != GameObject.states.DEAD ) &&
						( gameObjects.get(j).getState() != GameObject.states.DEAD ) &&
						gameObjects.get(i).isCollidable() && gameObjects.get(j).isCollidable() &&
						collideObjects( gameObjects.get(i), gameObjects.get(j) ) ) {
					gameObjects.get(i).collided( gameObjects.get(j) );
					gameObjects.get(j).collided( gameObjects.get(i) );
				}
			}
		}
	}
	
	private static boolean lineLineCollision( double x00, double y00, double x01, double y01,
			double x10, double y10, double x11, double y11) {
		
		double nom = -x11 * y01 + x11 * y00 + x10 * y01 - x10 * y00 +
				y11 * x01 - y11 * x00 - y10 * x01 + y10 * x00;
		if ( nom == 0 ) {
			return false;
		} else {
			double t = x11 * y00 + y11 * x10 - x11 * y10 - x10 * y00 - y11 * x00 + y10 * x00;
			double s = x10 * y01 - x10 * y00 + y10 * x00 + y00 * x01 - y10 * x01 - x00 * y01;
			t /= nom;
			s /= nom;
			if ( ( t >= 0 ) && ( t <= 1 ) && ( s >= 0 ) && ( s <= 1 ) )
				return true;
			else
				return false;
		}
	}
	
	private static boolean collideObjects( GameObject obj1, GameObject obj2 ) {
		for ( int[] side1 : obj1.getCollisionBox() ) {
			for ( int[] side2 : obj2.getCollisionBox() ) {
				if ( lineLineCollision( side1[0], side1[1], side1[2], side1[3],
						side2[0], side2[1], side2[2], side2[3] ) )
					return true;
			}
		}
		return false;
	}
	
	public static void onWin( int steps ) {
		System.out.println( "You sir, or ma'am, win \"one million\" internetz!\n" +
				"Well not really; men du klarede det på:\n" +
				steps + " træk.");
		game_over = true;
	}
	public static void onDeath( int steps ) {
		System.out.println( "Derp °_o\n" +
				"Du døde vist\n" +
				"Ej hvor flot du smadrede din \"vektor\" på bare:\n" +
				steps +" træk.");
		game_over = true;
	}

}
import java.awt.Color;
import java.util.Random;
import java.util.Scanner;

import static java.lang.System.out;


public class RandomWalk {
	public static final int WIDTH = 512;
	public static final int HEIGHT = 512;
	
	
	public static void main( String[] args ) {
		Scanner console = new Scanner( System.in );
		
		while(true)
		try {
			int[][] walk = generateWalk( 10 );
			drawWalk( min( walk, 1) );
			StdDraw.line(0, 0, 10, 10);
			StdDraw.show();
			if ( console.nextLine().matches( "exit" ) )
				break;
			drawWalk( walk );
			if ( console.nextLine().matches( "exit" ) )
				break;
			drawWalk( min( mapWalk( walk, WIDTH, HEIGHT ), 1 ) );
			if ( console.nextLine().matches( "exit" ) )
				break;
			drawWalk( mapWalk( walk, WIDTH, HEIGHT ) );
			if ( console.nextLine().matches( "exit" ) )
				break;
		}
		catch ( IllegalArgumentException e )  {
			out.println( "ERROR!" );
		}
		
		console.close();
		
		
	}


	public static int[][] generateWalk( int gridSize ) throws IllegalArgumentException { 
		// Throw exception if grid is nonexistent.
		if ( gridSize < 1) 
			throw new IllegalArgumentException(
					"Error: Gridsize in 'genereateWalk' must be >1");

		int[][] hits = new int[gridSize*2 + 1][gridSize*2 + 1];
		int xPos = gridSize, yPos = gridSize;
		boolean hit = false;
		Random random = new Random();
		
		// Initialize hits
		for (int i = 0; i<hits.length; i++) {
			for (int j = 0; j<hits[0].length; j++) {
				hits[i][j] = 0;
			}
		}

		// Add starting position
		hits[xPos][yPos] += 1;

		// Do the walk! (of shame?)
		while( !hit ) {
			switch ( random.nextInt( 4 ) ) {
			case 0:
				xPos++;
				break;
			case 1:
				xPos--;
				break;
			case 2:
				yPos++;
				break;
			case 3:
				yPos--;
				break;			
			}
			if ( ( xPos < 0 ) || ( xPos > gridSize*2 ) ||
					( yPos < 0 ) || ( yPos > gridSize*2 ) )
				hit = true;
			else {
				// Outcommented, cause hella slow!!
				// out.println("Position: (" + xPos + ", " + yPos + ")");
				hits[xPos][yPos]++;
			}
		}
		return hits;
	}
	
	
	public static void drawWalk( int[][] hits) {
		drawWalk( intArrayToDouble( hits ) );
	}
	
	


	public static void drawWalk( double [][] hits) {
		out.println( "size: (" + hits.length + ", " + hits[0].length + ")" );
		StdDraw.setXscale( 0 , hits.length );
	    StdDraw.setYscale( 0, hits[0].length );
	    StdDraw.setPenRadius( 0.01 / hits.length );
	    
	    double maxHits = max( hits );
	    out.println( "Maximum hits: " + maxHits );
	    
	    StdDraw.show(0); // Draw off-screen
	    StdDraw.clear();
	    for ( int i = 0; i < hits.length; i++ ) {
			for ( int j = 0; j < hits[0].length; j++ ) {
				if ( hits[i][j] > 0 ) {
					int value = 255 - (int) ( 255d * ( hits[i][j] / maxHits ) );
					StdDraw.setPenColor( new Color( value, value, value ) );
					StdDraw.filledSquare( i + 0.5, j + 0.5, 0.5);
					StdDraw.square( i + 0.5, j + 0.5, 0.5);
				}
			}
		}
	    StdDraw.show(); //Draw on-screen
		
	}
	
	// only works for downscaling
	public static double[][] mapWalk( int[][] hits, int xScale, int yScale  ) {
		double[][] result = new double[xScale][yScale];
		// Initialize result
		for (int i = 0; i<result.length; i++) {
			for (int j = 0; j<result[0].length; j++) {
				result[i][j] = 0;
			}
		}

		
		
		for ( int i = 0; i<hits.length; i++ ){
			for ( int j = 0; j<hits[0].length; j++ ){
				// Get coordinates in new coordinate system:
				double x = (double) i / hits.length * xScale;
				double y = (double) j / hits[0].length * yScale;
				
				// Get position of all four involved pixels in the new coordinate system 
				int[] pixelX = {
						(int) Math.max( Math.floor( x ), 0 ),
						(int) Math.min( Math.ceil( x ), xScale-1 ),
						(int) Math.min( Math.ceil( x ), xScale-1 ),
						(int) Math.max( Math.floor( x ), 0 )
						};
				int[] pixelY = {
						(int) Math.max( Math.floor( y ), 0 ),
						(int) Math.max( Math.floor( y ), 0 ),
						(int) Math.min( Math.ceil( y ), xScale-1 ),
						(int) Math.min( Math.ceil( y ), xScale-1 )
						};
				
				// Add value to involved pixels, but only to the ones, that are different
				// The first one is always unique
				result[pixelX[0]][pixelY[0]] += antiAlias( x, y, pixelX[0], pixelY[0] ) * hits[i][j];
				
				// If different from the first
				if ( ( pixelX[0] != pixelX[1] ) || ( pixelY[0] != pixelY[1] ) )
				result[pixelX[1]][pixelY[1]] += antiAlias( x, y, pixelX[1], pixelY[1] ) * hits[i][j];
				
				// If different from the first and second
				if ( ( ( pixelX[0] != pixelX[2] ) || ( pixelY[0] != pixelY[2] ) ) &&
						( ( pixelX[1] != pixelX[2] ) || ( pixelY[1] != pixelY[2] ) ) )
				result[pixelX[2]][pixelY[2]] += antiAlias( x, y, pixelX[2], pixelY[2] ) * hits[i][j];
				
				// If different from the first, second and third
				if ( ( ( pixelX[0] != pixelX[3] ) || ( pixelY[0] != pixelY[3] ) ) &&
						( ( pixelX[1] != pixelX[3] ) || ( pixelY[1] != pixelY[3] ) ) &&
						( ( pixelX[2] != pixelX[3] ) || ( pixelY[2] != pixelY[3] ) ) )
				result[pixelX[3]][pixelY[3]] += antiAlias( x, y, pixelX[3], pixelY[3] ) * hits[i][j];
			}	
		}
		
		return result;
	}
	
	public static void drawBlack(  ) {
		StdDraw.setXscale( 0 , WIDTH );
	    StdDraw.setYscale( 0, HEIGHT );
	    StdDraw.show(0); //Draw off-screen
	    for ( int i = 0; i<WIDTH; i++ ) {
	    	for ( int j = 0; j<HEIGHT; j++ ) {
	    		StdDraw.filledSquare( i, j, 0);
	    	}
	    }
	    StdDraw.show(); //Draw on-screen again
	    
	}
	
	
	/*
	 * Utility functions:
	 */
	
	/*
	 * Returns the distance between two points
	 */
	public static double distance( double x1, double y1, double x2, double y2 ) {
		return Math.sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );
	}
	
	/*
	 * Returns the anti-alias coeficien
	 */
	public static double antiAlias( double x1, double y1, double x2, double y2 ) {
		// Inaccurate, will have to be changed...
		return Math.max( 1 - distance( x1, y1, x2, y2 ), 0);
	}
	
	/*
	 * Return the maximum value in a 2D array
	 * Takes ints as inputs 
	 */
	public static int max( int[][] in ) {
		int result = 0;
		
		for (int i = 0; i<in.length; i++) {
			for (int j = 0; j<in[0].length; j++) {
				result = Math.max( result, in[i][j] );
			}
		}
		
		return result;
	}
	
	/*
	 * Return the maximum value in a 2D array
	 * Takes floats as inputs 
	 */
	public static double max( double[][] in ) {
		double result = 0;
		
		for (int i = 0; i<in.length; i++) {
			for (int j = 0; j<in[0].length; j++) {
				result = Math.max( result, in[i][j] );
			}
		}
		
		return result;
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of those two in a 2D array
	 * Takes floats as inputs 
	 */
	public static double[][] max( double[][] in1, double[][] in2 ) {
		double[][] result = new double[in1.length][in1[0].length];
		
		for (int i = 0; i<in1.length; i++) {
			for (int j = 0; j<in1[0].length; j++) {
				result[i][j] = Math.max( in2[i][j], in1[i][j] );
			}
		}
		return result;
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of the cell and a number
	 * as a 2D array
	 * Takes floats as inputs 
	 */
	public static double[][] max( double[][] in1, double in2 ) {
		double[][] result = new double[in1.length][in1[0].length];
		
		for (int i = 0; i<in1.length; i++) {
			for (int j = 0; j<in1[0].length; j++) {
				result[i][j] = Math.max( in2, in1[i][j] );
			}
		}
		return result;
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of the cell and a number
	 * as a 2D array
	 * Takes floats as inputs 
	 */
	public static int[][] max( int[][] in1, int in2 ) {
		return DoubleArrayToInt( max( intArrayToDouble( in1 ), (double) in2 ) );
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of those two in a 2D array
	 * Takes floats as inputs 
	 */
	public static double[][] min( double[][] in1, double[][] in2 ) {
		double[][] result = new double[in1.length][in1[0].length];
		
		for (int i = 0; i<in1.length; i++) {
			for (int j = 0; j<in1[0].length; j++) {
				result[i][j] = Math.min( in2[i][j], in1[i][j] );
			}
		}
		return result;
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of the cell and a number
	 * as a 2D array
	 * Takes floats as inputs 
	 */
	public static double[][] min( double[][] in1, double in2 ) {
		double[][] result = new double[in1.length][in1[0].length];
		
		for (int i = 0; i<in1.length; i++) {
			for (int j = 0; j<in1[0].length; j++) {
				result[i][j] = Math.min( in2, in1[i][j] );
			}
		}
		return result;
	}
	
	/*
	 * For each cell in an array
	 * returns the maximum value of the cell and a number
	 * as a 2D array
	 * Takes floats as inputs 
	 */
	public static int[][] min( int[][] in1, int in2 ) {
		return DoubleArrayToInt( min( intArrayToDouble( in1 ), (double) in2 ) );
	}
	
	/*
	 * Typecast arrays
	 * 
	 */
	private static double[][] intArrayToDouble( int[][] hits ) {
		double[][] hitsD = new double[hits.length][hits[0].length];
		for ( int i = 0; i < hitsD.length; i++ ) {
			for ( int j = 0; j < hitsD[0].length; j++ ) {
				hitsD[i][j] = (double) hits[i][j];
			}
		}
		return hitsD;
	}
	
	private static int[][] DoubleArrayToInt( double[][] hits ) {
		int[][] hitsD = new int[hits.length][hits[0].length];
		for ( int i = 0; i < hitsD.length; i++ ) {
			for ( int j = 0; j < hitsD[0].length; j++ ) {
				hitsD[i][j] = (int) hits[i][j];
			}
		}
		return hitsD;
	}
	
}

//while(true) {	
//	int[][] hits = new int[512][512];
//	StdDraw.clear();
//	
//	for ( int i = 0; i < 512; i++ ){
//		for ( int j = 0; j < 512; j++ ) {
//			
//			
//			if ( ( i == (int) Math.round( StdDraw.mouseX() * (double) 512/WIDTH ) ) &&
//						( j == (int) Math.round( StdDraw.mouseY() * (double) 512/HEIGHT ) )	) 							hits[i][j] = 1;
//			else
//				hits[i][j] = 0;
//		}
//	}
//	drawWalk( mapWalk( hits, WIDTH, HEIGHT ) );
//	try { Thread.sleep( 100 ); }
//    catch (InterruptedException e) { System.out.println("Error sleeping"); }
//}
/*************************************************************************
 *  Compilation:  javac StdDraw.java
 *  Execution:    java StdDraw
 *
 *  Standard drawing library. This class provides a basic capability for
 *  creating drawings with your programs. It uses a simple graphics model that
 *  allows you to create drawings consisting of points, lines, and curves
 *  in a window on your computer and to save the drawings to a file.
 *
 *  Todo
 *  ----
 *    -  Add support for gradient fill, etc.
 *
 *  Remarks
 *  -------
 *    -  don't use AffineTransform for rescaling since it inverts
 *       images and strings
 *    -  careful using setFont in inner loop within an animation -
 *       it can cause flicker
 *
 *************************************************************************/

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.io.*;
import java.net.*;
import java.util.LinkedList;
import java.util.TreeSet;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *  <i>Standard draw</i>. This class provides a basic capability for
 *  creating drawings with your programs. It uses a simple graphics model that
 *  allows you to create drawings consisting of points, lines, and curves
 *  in a window on your computer and to save the drawings to a file.
 *  <p>
 *  For additional documentation, see <a href="http://introcs.cs.princeton.edu/15inout">Section 1.5</a> of
 *  <i>Introduction to Programming in Java: An Interdisciplinary Approach</i> by Robert Sedgewick and Kevin Wayne.
 */
public final class StdDraw implements ActionListener, MouseListener, MouseMotionListener, KeyListener {

    // pre-defined colors
    public static final Color BLACK      = Color.BLACK;
    public static final Color BLUE       = Color.BLUE;
    public static final Color CYAN       = Color.CYAN;
    public static final Color DARK_GRAY  = Color.DARK_GRAY;
    public static final Color GRAY       = Color.GRAY;
    public static final Color GREEN      = Color.GREEN;
    public static final Color LIGHT_GRAY = Color.LIGHT_GRAY;
    public static final Color MAGENTA    = Color.MAGENTA;
    public static final Color ORANGE     = Color.ORANGE;
    public static final Color PINK       = Color.PINK;
    public static final Color RED        = Color.RED;
    public static final Color WHITE      = Color.WHITE;
    public static final Color YELLOW     = Color.YELLOW;

    /**
     * Shade of blue used in Introduction to Programming in Java.
     * It is Pantone 300U. The RGB values are approximately (9, 90, 166).
     */
    public static final Color BOOK_BLUE       = new Color(  9,  90, 166);
    public static final Color BOOK_LIGHT_BLUE = new Color(103, 198, 243);

    /**
     * Shade of red used in Algorithms 4th edition.
     * It is Pantone 1805U. The RGB values are approximately (150, 35, 31).
     */
    public static final Color BOOK_RED = new Color(150, 35, 31);

    // default colors
    private static final Color DEFAULT_PEN_COLOR   = BLACK;
    private static final Color DEFAULT_CLEAR_COLOR = WHITE;

    // current pen color
    private static Color penColor;

    // default canvas size is DEFAULT_SIZE-by-DEFAULT_SIZE
    private static final int DEFAULT_SIZE = 512;
    private static int width  = DEFAULT_SIZE;
    private static int height = DEFAULT_SIZE;

    // default pen radius
    private static final double DEFAULT_PEN_RADIUS = 0.002;

    // current pen radius
    private static double penRadius;

    // show we draw immediately or wait until next show?
    private static boolean defer = false;

    // boundary of drawing canvas, 5% border
    private static final double BORDER = 0.05;
    private static final double DEFAULT_XMIN = 0.0;
    private static final double DEFAULT_XMAX = 1.0;
    private static final double DEFAULT_YMIN = 0.0;
    private static final double DEFAULT_YMAX = 1.0;
    private static double xmin, ymin, xmax, ymax;

    // for synchronization
    private static Object mouseLock = new Object();
    private static Object keyLock = new Object();

    // default font
    private static final Font DEFAULT_FONT = new Font("SansSerif", Font.PLAIN, 16);

    // current font
    private static Font font;

    // double buffered graphics
    private static BufferedImage offscreenImage, onscreenImage;
    private static Graphics2D offscreen, onscreen;

    // singleton for callbacks: avoids generation of extra .class files
    private static StdDraw std = new StdDraw();

    // the frame for drawing to the screen
    private static JFrame frame;

    // mouse state
    private static boolean mousePressed = false;
    private static double mouseX = 0;
    private static double mouseY = 0;

    // queue of typed key characters
    private static LinkedList<Character> keysTyped = new LinkedList<Character>();

    // set of key codes currently pressed down
    private static TreeSet<Integer> keysDown = new TreeSet<Integer>();
  

    // singleton pattern: client can't instantiate
    private StdDraw() { }


    // static initializer
    static { init(); }

    /**
     * Set the window size to the default size 512-by-512 pixels.
     */
    public static void setCanvasSize() {
        setCanvasSize(DEFAULT_SIZE, DEFAULT_SIZE);
    }

    /**
     * Set the window size to w-by-h pixels.
     *
     * @param w the width as a number of pixels
     * @param h the height as a number of pixels
     * @throws a RunTimeException if the width or height is 0 or negative
     */
    public static void setCanvasSize(int w, int h) {
        if (w < 1 || h < 1) throw new RuntimeException("width and height must be positive");
        width = w;
        height = h;
        init();
    }

    // init
    private static void init() {
        if (frame != null) frame.setVisible(false);
        frame = new JFrame();
        offscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        onscreenImage  = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        offscreen = offscreenImage.createGraphics();
        onscreen  = onscreenImage.createGraphics();
        setXscale();
        setYscale();
        offscreen.setColor(DEFAULT_CLEAR_COLOR);
        offscreen.fillRect(0, 0, width, height);
        setPenColor();
        setPenRadius();
        setFont();
        clear();

        // add antialiasing
        RenderingHints hints = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                                                  RenderingHints.VALUE_ANTIALIAS_ON);
        hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        offscreen.addRenderingHints(hints);

        // frame stuff
        ImageIcon icon = new ImageIcon(onscreenImage);
        JLabel draw = new JLabel(icon);

        draw.addMouseListener(std);
        draw.addMouseMotionListener(std);

        frame.setContentPane(draw);
        frame.addKeyListener(std);    // JLabel cannot get keyboard focus
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            // closes all windows
        // frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);      // closes only current window
        frame.setTitle("Standard Draw");
        frame.setJMenuBar(createMenuBar());
        frame.pack();
        frame.requestFocusInWindow();
        frame.setVisible(true);
    }

    // create the menu bar (changed to private)
    private static JMenuBar createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("File");
        menuBar.add(menu);
        JMenuItem menuItem1 = new JMenuItem(" Save...   ");
        menuItem1.addActionListener(std);
        menuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
                                Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        menu.add(menuItem1);
        return menuBar;
    }


   /*************************************************************************
    *  User and screen coordinate systems
    *************************************************************************/

    /**
     * Set the x-scale to be the default (between 0.0 and 1.0).
     */
    public static void setXscale() { setXscale(DEFAULT_XMIN, DEFAULT_XMAX); }

    /**
     * Set the y-scale to be the default (between 0.0 and 1.0).
     */
    public static void setYscale() { setYscale(DEFAULT_YMIN, DEFAULT_YMAX); }

    /**
     * Set the x-scale (a 10% border is added to the values)
     * @param min the minimum value of the x-scale
     * @param max the maximum value of the x-scale
     */
    public static void setXscale(double min, double max) {
        double size = max - min;
        synchronized (mouseLock) {
            xmin = min - BORDER * size;
            xmax = max + BORDER * size;
        }
    }

    /**
     * Set the y-scale (a 10% border is added to the values).
     * @param min the minimum value of the y-scale
     * @param max the maximum value of the y-scale
     */
    public static void setYscale(double min, double max) {
        double size = max - min;
        synchronized (mouseLock) {
            ymin = min - BORDER * size;
            ymax = max + BORDER * size;
        }
    }

    /**
     * Set the x-scale and y-scale (a 10% border is added to the values)
     * @param min the minimum value of the x- and y-scales
     * @param max the maximum value of the x- and y-scales
     */
    public static void setScale(double min, double max) {
        double size = max - min;
        synchronized (mouseLock) {
            xmin = min - BORDER * size;
            xmax = max + BORDER * size;
            ymin = min - BORDER * size;
            ymax = max + BORDER * size;
        }
    }

    // helper functions that scale from user coordinates to screen coordinates and back
    private static double  scaleX(double x) { return width  * (x - xmin) / (xmax - xmin); }
    private static double  scaleY(double y) { return height * (ymax - y) / (ymax - ymin); }
    private static double factorX(double w) { return w * width  / Math.abs(xmax - xmin);  }
    private static double factorY(double h) { return h * height / Math.abs(ymax - ymin);  }
    private static double   userX(double x) { return xmin + x * (xmax - xmin) / width;    }
    private static double   userY(double y) { return ymax - y * (ymax - ymin) / height;   }


    /**
     * Clear the screen to the default color (white).
     */
    public static void clear() { clear(DEFAULT_CLEAR_COLOR); }
    /**
     * Clear the screen to the given color.
     * @param color the Color to make the background
     */
    public static void clear(Color color) {
        offscreen.setColor(color);
        offscreen.fillRect(0, 0, width, height);
        offscreen.setColor(penColor);
        draw();
    }

    /**
     * Get the current pen radius.
     */
    public static double getPenRadius() { return penRadius; }

    /**
     * Set the pen size to the default (.002).
     */
    public static void setPenRadius() { setPenRadius(DEFAULT_PEN_RADIUS); }
    /**
     * Set the radius of the pen to the given size.
     * @param r the radius of the pen
     * @throws RuntimeException if r is negative
     */
    public static void setPenRadius(double r) {
        if (r < 0) throw new RuntimeException("pen radius must be positive");
        penRadius = r;
        float scaledPenRadius = (float) (r * DEFAULT_SIZE);
        BasicStroke stroke = new BasicStroke(scaledPenRadius, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
        // BasicStroke stroke = new BasicStroke(scaledPenRadius);
        offscreen.setStroke(stroke);
    }

    /**
     * Get the current pen color.
     */
    public static Color getPenColor() { return penColor; }

    /**
     * Set the pen color to the default color (black).
     */
    public static void setPenColor() { setPenColor(DEFAULT_PEN_COLOR); }
    /**
     * Set the pen color to the given color. The available pen colors are
     * BLACK, BLUE, CYAN, DARK_GRAY, GRAY, GREEN, LIGHT_GRAY, MAGENTA,
     * ORANGE, PINK, RED, WHITE, and YELLOW.
     * @param color the Color to make the pen
     */
    public static void setPenColor(Color color) {
        penColor = color;
        offscreen.setColor(penColor);
    }

    /**
     * Get the current font.
     */
    public static Font getFont() { return font; }

    /**
     * Set the font to the default font (sans serif, 16 point).
     */
    public static void setFont() { setFont(DEFAULT_FONT); }

    /**
     * Set the font to the given value.
     * @param f the font to make text
     */
    public static void setFont(Font f) { font = f; }


   /*************************************************************************
    *  Drawing geometric shapes.
    *************************************************************************/

    /**
     * Draw a line from (x0, y0) to (x1, y1).
     * @param x0 the x-coordinate of the starting point
     * @param y0 the y-coordinate of the starting point
     * @param x1 the x-coordinate of the destination point
     * @param y1 the y-coordinate of the destination point
     */
    public static void line(double x0, double y0, double x1, double y1) {
        offscreen.draw(new Line2D.Double(scaleX(x0), scaleY(y0), scaleX(x1), scaleY(y1)));
        draw();
    }

    /**
     * Draw one pixel at (x, y).
     * @param x the x-coordinate of the pixel
     * @param y the y-coordinate of the pixel
     */
    private static void pixel(double x, double y) {
        offscreen.fillRect((int) Math.round(scaleX(x)), (int) Math.round(scaleY(y)), 1, 1);
    }

    /**
     * Draw a point at (x, y).
     * @param x the x-coordinate of the point
     * @param y the y-coordinate of the point
     */
    public static void point(double x, double y) {
        double xs = scaleX(x);
        double ys = scaleY(y);
        double r = penRadius;
        float scaledPenRadius = (float) (r * DEFAULT_SIZE);

        // double ws = factorX(2*r);
        // double hs = factorY(2*r);
        // if (ws <= 1 && hs <= 1) pixel(x, y);
        if (scaledPenRadius <= 1) pixel(x, y);
        else offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius/2, ys - scaledPenRadius/2,
                                                 scaledPenRadius, scaledPenRadius));
        draw();
    }

    /**
     * Draw a circle of radius r, centered on (x, y).
     * @param x the x-coordinate of the center of the circle
     * @param y the y-coordinate of the center of the circle
     * @param r the radius of the circle
     * @throws RuntimeException if the radius of the circle is negative
     */
    public static void circle(double x, double y, double r) {
        if (r < 0) throw new RuntimeException("circle radius can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*r);
        double hs = factorY(2*r);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.draw(new Ellipse2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }

    /**
     * Draw filled circle of radius r, centered on (x, y).
     * @param x the x-coordinate of the center of the circle
     * @param y the y-coordinate of the center of the circle
     * @param r the radius of the circle
     * @throws RuntimeException if the radius of the circle is negative
     */
    public static void filledCircle(double x, double y, double r) {
        if (r < 0) throw new RuntimeException("circle radius can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*r);
        double hs = factorY(2*r);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.fill(new Ellipse2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }


    /**
     * Draw an ellipse with given semimajor and semiminor axes, centered on (x, y).
     * @param x the x-coordinate of the center of the ellipse
     * @param y the y-coordinate of the center of the ellipse
     * @param semiMajorAxis is the semimajor axis of the ellipse
     * @param semiMinorAxis is the semiminor axis of the ellipse
     * @throws RuntimeException if either of the axes are negative
     */
    public static void ellipse(double x, double y, double semiMajorAxis, double semiMinorAxis) {
        if (semiMajorAxis < 0) throw new RuntimeException("ellipse semimajor axis can't be negative");
        if (semiMinorAxis < 0) throw new RuntimeException("ellipse semiminor axis can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*semiMajorAxis);
        double hs = factorY(2*semiMinorAxis);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.draw(new Ellipse2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }

    /**
     * Draw an ellipse with given semimajor and semiminor axes, centered on (x, y).
     * @param x the x-coordinate of the center of the ellipse
     * @param y the y-coordinate of the center of the ellipse
     * @param semiMajorAxis is the semimajor axis of the ellipse
     * @param semiMinorAxis is the semiminor axis of the ellipse
     * @throws RuntimeException if either of the axes are negative
     */
    public static void filledEllipse(double x, double y, double semiMajorAxis, double semiMinorAxis) {
        if (semiMajorAxis < 0) throw new RuntimeException("ellipse semimajor axis can't be negative");
        if (semiMinorAxis < 0) throw new RuntimeException("ellipse semiminor axis can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*semiMajorAxis);
        double hs = factorY(2*semiMinorAxis);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.fill(new Ellipse2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }


    /**
     * Draw an arc of radius r, centered on (x, y), from angle1 to angle2 (in degrees).
     * @param x the x-coordinate of the center of the circle
     * @param y the y-coordinate of the center of the circle
     * @param r the radius of the circle
     * @param angle1 the starting angle. 0 would mean an arc beginning at 3 o'clock.
     * @param angle2 the angle at the end of the arc. For example, if
     *        you want a 90 degree arc, then angle2 should be angle1 + 90.
     * @throws RuntimeException if the radius of the circle is negative
     */
    public static void arc(double x, double y, double r, double angle1, double angle2) {
        if (r < 0) throw new RuntimeException("arc radius can't be negative");
        while (angle2 < angle1) angle2 += 360;
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*r);
        double hs = factorY(2*r);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.draw(new Arc2D.Double(xs - ws/2, ys - hs/2, ws, hs, angle1, angle2 - angle1, Arc2D.OPEN));
        draw();
    }

    /**
     * Draw a square of side length 2r, centered on (x, y).
     * @param x the x-coordinate of the center of the square
     * @param y the y-coordinate of the center of the square
     * @param r radius is half the length of any side of the square
     * @throws RuntimeException if r is negative
     */
    public static void square(double x, double y, double r) {
        if (r < 0) throw new RuntimeException("square side length can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*r);
        double hs = factorY(2*r);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.draw(new Rectangle2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }

    /**
     * Draw a filled square of side length 2r, centered on (x, y).
     * @param x the x-coordinate of the center of the square
     * @param y the y-coordinate of the center of the square
     * @param r radius is half the length of any side of the square
     * @throws RuntimeException if r is negative
     */
    public static void filledSquare(double x, double y, double r) {
        if (r < 0) throw new RuntimeException("square side length can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*r);
        double hs = factorY(2*r);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.fill(new Rectangle2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }


    /**
     * Draw a rectangle of given half width and half height, centered on (x, y).
     * @param x the x-coordinate of the center of the rectangle
     * @param y the y-coordinate of the center of the rectangle
     * @param halfWidth is half the width of the rectangle
     * @param halfHeight is half the height of the rectangle
     * @throws RuntimeException if halfWidth or halfHeight is negative
     */
    public static void rectangle(double x, double y, double halfWidth, double halfHeight) {
        if (halfWidth  < 0) throw new RuntimeException("half width can't be negative");
        if (halfHeight < 0) throw new RuntimeException("half height can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*halfWidth);
        double hs = factorY(2*halfHeight);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.draw(new Rectangle2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }

    /**
     * Draw a filled rectangle of given half width and half height, centered on (x, y).
     * @param x the x-coordinate of the center of the rectangle
     * @param y the y-coordinate of the center of the rectangle
     * @param halfWidth is half the width of the rectangle
     * @param halfHeight is half the height of the rectangle
     * @throws RuntimeException if halfWidth or halfHeight is negative
     */
    public static void filledRectangle(double x, double y, double halfWidth, double halfHeight) {
        if (halfWidth  < 0) throw new RuntimeException("half width can't be negative");
        if (halfHeight < 0) throw new RuntimeException("half height can't be negative");
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(2*halfWidth);
        double hs = factorY(2*halfHeight);
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else offscreen.fill(new Rectangle2D.Double(xs - ws/2, ys - hs/2, ws, hs));
        draw();
    }


    /**
     * Draw a polygon with the given (x[i], y[i]) coordinates.
     * @param x an array of all the x-coordindates of the polygon
     * @param y an array of all the y-coordindates of the polygon
     */
    public static void polygon(double[] x, double[] y) {
        int N = x.length;
        GeneralPath path = new GeneralPath();
        path.moveTo((float) scaleX(x[0]), (float) scaleY(y[0]));
        for (int i = 0; i < N; i++)
            path.lineTo((float) scaleX(x[i]), (float) scaleY(y[i]));
        path.closePath();
        offscreen.draw(path);
        draw();
    }

    /**
     * Draw a filled polygon with the given (x[i], y[i]) coordinates.
     * @param x an array of all the x-coordindates of the polygon
     * @param y an array of all the y-coordindates of the polygon
     */
    public static void filledPolygon(double[] x, double[] y) {
        int N = x.length;
        GeneralPath path = new GeneralPath();
        path.moveTo((float) scaleX(x[0]), (float) scaleY(y[0]));
        for (int i = 0; i < N; i++)
            path.lineTo((float) scaleX(x[i]), (float) scaleY(y[i]));
        path.closePath();
        offscreen.fill(path);
        draw();
    }



   /*************************************************************************
    *  Drawing images.
    *************************************************************************/

    // get an image from the given filename
    private static Image getImage(String filename) {

        // to read from file
        ImageIcon icon = new ImageIcon(filename);

        // try to read from URL
        if ((icon == null) || (icon.getImageLoadStatus() != MediaTracker.COMPLETE)) {
            try {
                URL url = new URL(filename);
                icon = new ImageIcon(url);
            } catch (Exception e) { /* not a url */ }
        }

        // in case file is inside a .jar
        if ((icon == null) || (icon.getImageLoadStatus() != MediaTracker.COMPLETE)) {
            URL url = StdDraw.class.getResource(filename);
            if (url == null) throw new RuntimeException("image " + filename + " not found");
            icon = new ImageIcon(url);
        }

        return icon.getImage();
    }

    /**
     * Draw picture (gif, jpg, or png) centered on (x, y).
     * @param x the center x-coordinate of the image
     * @param y the center y-coordinate of the image
     * @param s the name of the image/picture, e.g., "ball.gif"
     * @throws RuntimeException if the image is corrupt
     */
    public static void picture(double x, double y, String s) {
        Image image = getImage(s);
        double xs = scaleX(x);
        double ys = scaleY(y);
        int ws = image.getWidth(null);
        int hs = image.getHeight(null);
        if (ws < 0 || hs < 0) throw new RuntimeException("image " + s + " is corrupt");

        offscreen.drawImage(image, (int) Math.round(xs - ws/2.0), (int) Math.round(ys - hs/2.0), null);
        draw();
    }

    /**
     * Draw picture (gif, jpg, or png) centered on (x, y),
     * rotated given number of degrees
     * @param x the center x-coordinate of the image
     * @param y the center y-coordinate of the image
     * @param s the name of the image/picture, e.g., "ball.gif"
     * @param degrees is the number of degrees to rotate counterclockwise
     * @throws RuntimeException if the image is corrupt
     */
    public static void picture(double x, double y, String s, double degrees) {
        Image image = getImage(s);
        double xs = scaleX(x);
        double ys = scaleY(y);
        int ws = image.getWidth(null);
        int hs = image.getHeight(null);
        if (ws < 0 || hs < 0) throw new RuntimeException("image " + s + " is corrupt");

        offscreen.rotate(Math.toRadians(-degrees), xs, ys);
        offscreen.drawImage(image, (int) Math.round(xs - ws/2.0), (int) Math.round(ys - hs/2.0), null);
        offscreen.rotate(Math.toRadians(+degrees), xs, ys);

        draw();
    }

    /**
     * Draw picture (gif, jpg, or png) centered on (x, y), rescaled to w-by-h.
     * @param x the center x coordinate of the image
     * @param y the center y coordinate of the image
     * @param s the name of the image/picture, e.g., "ball.gif"
     * @param w the width of the image
     * @param h the height of the image
     * @throws RuntimeException if the width height are negative
     * @throws RuntimeException if the image is corrupt
     */
    public static void picture(double x, double y, String s, double w, double h) {
        Image image = getImage(s);
        double xs = scaleX(x);
        double ys = scaleY(y);
        if (w < 0) throw new RuntimeException("width is negative: " + w);
        if (h < 0) throw new RuntimeException("height is negative: " + h);
        double ws = factorX(w);
        double hs = factorY(h);
        if (ws < 0 || hs < 0) throw new RuntimeException("image " + s + " is corrupt");
        if (ws <= 1 && hs <= 1) pixel(x, y);
        else {
            offscreen.drawImage(image, (int) Math.round(xs - ws/2.0),
                                       (int) Math.round(ys - hs/2.0),
                                       (int) Math.round(ws),
                                       (int) Math.round(hs), null);
        }
        draw();
    }


    /**
     * Draw picture (gif, jpg, or png) centered on (x, y), rotated
     * given number of degrees, rescaled to w-by-h.
     * @param x the center x-coordinate of the image
     * @param y the center y-coordinate of the image
     * @param s the name of the image/picture, e.g., "ball.gif"
     * @param w the width of the image
     * @param h the height of the image
     * @param degrees is the number of degrees to rotate counterclockwise
     * @throws RuntimeException if the image is corrupt
     */
    public static void picture(double x, double y, String s, double w, double h, double degrees) {
        Image image = getImage(s);
        double xs = scaleX(x);
        double ys = scaleY(y);
        double ws = factorX(w);
        double hs = factorY(h);
        if (ws < 0 || hs < 0) throw new RuntimeException("image " + s + " is corrupt");
        if (ws <= 1 && hs <= 1) pixel(x, y);

        offscreen.rotate(Math.toRadians(-degrees), xs, ys);
        offscreen.drawImage(image, (int) Math.round(xs - ws/2.0),
                                   (int) Math.round(ys - hs/2.0),
                                   (int) Math.round(ws),
                                   (int) Math.round(hs), null);
        offscreen.rotate(Math.toRadians(+degrees), xs, ys);

        draw();
    }


   /*************************************************************************
    *  Drawing text.
    *************************************************************************/

    /**
     * Write the given text string in the current font, centered on (x, y).
     * @param x the center x-coordinate of the text
     * @param y the center y-coordinate of the text
     * @param s the text
     */
    public static void text(double x, double y, String s) {
        offscreen.setFont(font);
        FontMetrics metrics = offscreen.getFontMetrics();
        double xs = scaleX(x);
        double ys = scaleY(y);
        int ws = metrics.stringWidth(s);
        int hs = metrics.getDescent();
        offscreen.drawString(s, (float) (xs - ws/2.0), (float) (ys + hs));
        draw();
    }

    /**
     * Write the given text string in the current font, centered on (x, y) and
     * rotated by the specified number of degrees  
     * @param x the center x-coordinate of the text
     * @param y the center y-coordinate of the text
     * @param s the text
     * @param degrees is the number of degrees to rotate counterclockwise
     */
    public static void text(double x, double y, String s, double degrees) {
        double xs = scaleX(x);
        double ys = scaleY(y);
        offscreen.rotate(Math.toRadians(-degrees), xs, ys);
        text(x, y, s);
        offscreen.rotate(Math.toRadians(+degrees), xs, ys);
    }


    /**
     * Write the given text string in the current font, left-aligned at (x, y).
     * @param x the x-coordinate of the text
     * @param y the y-coordinate of the text
     * @param s the text
     */
    public static void textLeft(double x, double y, String s) {
        offscreen.setFont(font);
        FontMetrics metrics = offscreen.getFontMetrics();
        double xs = scaleX(x);
        double ys = scaleY(y);
        int hs = metrics.getDescent();
        offscreen.drawString(s, (float) (xs), (float) (ys + hs));
        draw();
    }

    /**
     * Write the given text string in the current font, right-aligned at (x, y).
     * @param x the x-coordinate of the text
     * @param y the y-coordinate of the text
     * @param s the text
     */
    public static void textRight(double x, double y, String s) {
        offscreen.setFont(font);
        FontMetrics metrics = offscreen.getFontMetrics();
        double xs = scaleX(x);
        double ys = scaleY(y);
        int ws = metrics.stringWidth(s);
        int hs = metrics.getDescent();
        offscreen.drawString(s, (float) (xs - ws), (float) (ys + hs));
        draw();
    }



    /**
     * Display on screen, pause for t milliseconds, and turn on
     * <em>animation mode</em>: subsequent calls to
     * drawing methods such as <tt>line()</tt>, <tt>circle()</tt>, and <tt>square()</tt>
     * will not be displayed on screen until the next call to <tt>show()</tt>.
     * This is useful for producing animations (clear the screen, draw a bunch of shapes,
     * display on screen for a fixed amount of time, and repeat). It also speeds up
     * drawing a huge number of shapes (call <tt>show(0)</tt> to defer drawing
     * on screen, draw the shapes, and call <tt>show(0)</tt> to display them all
     * on screen at once).
     * @param t number of milliseconds
     */
    public static void show(int t) {
        defer = false;
        draw();
        try { Thread.sleep(t); }
        catch (InterruptedException e) { System.out.println("Error sleeping"); }
        defer = true;
    }

    /**
     * Display on-screen and turn off animation mode:
     * subsequent calls to
     * drawing methods such as <tt>line()</tt>, <tt>circle()</tt>, and <tt>square()</tt>
     * will be displayed on screen when called. This is the default.
     */
    public static void show() {
        defer = false;
        draw();
    }

    // draw onscreen if defer is false
    private static void draw() {
        if (defer) return;
        onscreen.drawImage(offscreenImage, 0, 0, null);
        frame.repaint();
    }


   /*************************************************************************
    *  Save drawing to a file.
    *************************************************************************/

    /**
     * Save onscreen image to file - suffix must be png, jpg, or gif.
     * @param filename the name of the file with one of the required suffixes
     */
    public static void save(String filename) {
        File file = new File(filename);
        String suffix = filename.substring(filename.lastIndexOf('.') + 1);

        // png files
        if (suffix.toLowerCase().equals("png")) {
            try { ImageIO.write(onscreenImage, suffix, file); }
            catch (IOException e) { e.printStackTrace(); }
        }

        // need to change from ARGB to RGB for jpeg
        // reference: http://archives.java.sun.com/cgi-bin/wa?A2=ind0404&L=java2d-interest&D=0&P=2727
        else if (suffix.toLowerCase().equals("jpg")) {
            WritableRaster raster = onscreenImage.getRaster();
            WritableRaster newRaster;
            newRaster = raster.createWritableChild(0, 0, width, height, 0, 0, new int[] {0, 1, 2});
            DirectColorModel cm = (DirectColorModel) onscreenImage.getColorModel();
            DirectColorModel newCM = new DirectColorModel(cm.getPixelSize(),
                                                          cm.getRedMask(),
                                                          cm.getGreenMask(),
                                                          cm.getBlueMask());
            BufferedImage rgbBuffer = new BufferedImage(newCM, newRaster, false,  null);
            try { ImageIO.write(rgbBuffer, suffix, file); }
            catch (IOException e) { e.printStackTrace(); }
        }

        else {
            System.out.println("Invalid image file type: " + suffix);
        }
    }


    /**
     * This method cannot be called directly.
     */
    public void actionPerformed(ActionEvent e) {
        FileDialog chooser = new FileDialog(StdDraw.frame, "Use a .png or .jpg extension", FileDialog.SAVE);
        chooser.setVisible(true);
        String filename = chooser.getFile();
        if (filename != null) {
            StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());
        }
    }


   /*************************************************************************
    *  Mouse interactions.
    *************************************************************************/

    /**
     * Is the mouse being pressed?
     * @return true or false
     */
    public static boolean mousePressed() {
        synchronized (mouseLock) {
            return mousePressed;
        }
    }

    /**
     * What is the x-coordinate of the mouse?
     * @return the value of the x-coordinate of the mouse
     */
    public static double mouseX() {
        synchronized (mouseLock) {
            return mouseX;
        }
    }

    /**
     * What is the y-coordinate of the mouse?
     * @return the value of the y-coordinate of the mouse
     */
    public static double mouseY() {
        synchronized (mouseLock) {
            return mouseY;
        }
    }


    /**
     * This method cannot be called directly.
     */
    public void mouseClicked(MouseEvent e) { }

    /**
     * This method cannot be called directly.
     */
    public void mouseEntered(MouseEvent e) { }

    /**
     * This method cannot be called directly.
     */
    public void mouseExited(MouseEvent e) { }

    /**
     * This method cannot be called directly.
     */
    public void mousePressed(MouseEvent e) {
        synchronized (mouseLock) {
            mouseX = StdDraw.userX(e.getX());
            mouseY = StdDraw.userY(e.getY());
            mousePressed = true;
        }
    }

    /**
     * This method cannot be called directly.
     */
    public void mouseReleased(MouseEvent e) {
        synchronized (mouseLock) {
            mousePressed = false;
        }
    }

    /**
     * This method cannot be called directly.
     */
    public void mouseDragged(MouseEvent e)  {
        synchronized (mouseLock) {
            mouseX = StdDraw.userX(e.getX());
            mouseY = StdDraw.userY(e.getY());
        }
    }

    /**
     * This method cannot be called directly.
     */
    public void mouseMoved(MouseEvent e) {
        synchronized (mouseLock) {
            mouseX = StdDraw.userX(e.getX());
            mouseY = StdDraw.userY(e.getY());
        }
    }


   /*************************************************************************
    *  Keyboard interactions.
    *************************************************************************/

    /**
     * Has the user typed a key?
     * @return true if the user has typed a key, false otherwise
     */
    public static boolean hasNextKeyTyped() {
        synchronized (keyLock) {
            return !keysTyped.isEmpty();
        }
    }

    /**
     * What is the next key that was typed by the user? This method returns
     * a Unicode character corresponding to the key typed (such as 'a' or 'A').
     * It cannot identify action keys (such as F1
     * and arrow keys) or modifier keys (such as control).
     * @return the next Unicode key typed
     */
    public static char nextKeyTyped() {
        synchronized (keyLock) {
            return keysTyped.removeLast();
        }
    }

    /**
     * Is the keycode currently being pressed? This method takes as an argument
     * the keycode (corresponding to a physical key). It can handle action keys
     * (such as F1 and arrow keys) and modifier keys (such as shift and control).
     * See <a href = "http://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html">KeyEvent.java</a>
     * for a description of key codes.
     * @return true if keycode is currently being pressed, false otherwise
     */
    public static boolean isKeyPressed(int keycode) {
        synchronized (keyLock) {
            return keysDown.contains(keycode);
        }
    }


    /**
     * This method cannot be called directly.
     */
    public void keyTyped(KeyEvent e) {
        synchronized (keyLock) {
            keysTyped.addFirst(e.getKeyChar());
        }
    }

    /**
     * This method cannot be called directly.
     */
    public void keyPressed(KeyEvent e) {
        synchronized (keyLock) {
            keysDown.add(e.getKeyCode());
        }
    }

    /**
     * This method cannot be called directly.
     */
    public void keyReleased(KeyEvent e) {
        synchronized (keyLock) {
            keysDown.remove(e.getKeyCode());
        }
    }




    /**
     * Test client.
     */
    public static void main(String[] args) {
        StdDraw.square(.2, .8, .1);
        StdDraw.filledSquare(.8, .8, .2);
        StdDraw.circle(.8, .2, .2);

        StdDraw.setPenColor(StdDraw.BOOK_RED);
        StdDraw.setPenRadius(.02);
        StdDraw.arc(.8, .2, .1, 200, 45);

        // draw a blue diamond
        StdDraw.setPenRadius();
        StdDraw.setPenColor(StdDraw.BOOK_BLUE);
        double[] x = { .1, .2, .3, .2 };
        double[] y = { .2, .3, .2, .1 };
        StdDraw.filledPolygon(x, y);

        // text
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(0.2, 0.5, "black text");
        StdDraw.setPenColor(StdDraw.WHITE);
        StdDraw.text(0.8, 0.8, "white text");
    }

}
import java.util.*;

public class Wall extends GameObject {
	
	protected int xEnd, yEnd;
	
	
	public Wall( int x0, int y0, int x1, int y1 ) {
		ID = IDs.WALL;
		state = states.ALIVE;
		collidable = true;
		xPos = x0;
		yPos = y0;
		xEnd = x1;
		yEnd = y1;
		collisionBox = new ArrayList<int[]>();
		collisionBox.add( new int[]{xPos, yPos, xEnd, yEnd} );
	}
	
	public void render() {
		StdDraw.setPenColor( StdDraw.BLACK );
		StdDraw.setPenRadius( 0.005 );
		StdDraw.line( xPos, yPos, xEnd, yEnd );
	}

}
